Exercise (Instructions): Getting Started with React
Objectives and Outcomes
In this first React exercise, you will first install create-react-app, the command line tool for scaffolding React applications. You will then use the tool to scaffold out a basic React application. We will thereafter develop this application into a full-fledged React application in the process of doing the exercises in this course. At the end of this exercise you will be able to:

>>Install create-react-app
>>Scaffold out a basic React application

>>Installing Yarn
	>Yarn is another package manager like NPM, but is better suited and faster to work with for React applications. So let us install yarn and use it for building our React applications.
	>To install Yarn, you can find the instructions for your specific platform at https://yarnpkg.com/en/docs/install.
	>If you choose not to install Yarn, you can continue to use npm in place of yarn without any problem.
>>Installing create-react-app
	From the React documentation we learn that the create-react-app CLI makes it easy to create an application that already works, right out of the box. It already follows the best practices suggested by the React community!
	
     >To install create-react-app globally, type the following at the prompt:
	
	yarn global add create-react-app@1.5.2
	
	Use sudo on a Mac and Linux. Alternately you can use npm, by typing "npm install -g create-react-app@1.5.2".
>>This will make the command line tool for creating React applications. To learn more about the various commands that this CLI provides, type at the prompt:
	create-react-app --help

>>Generating and Serving a React Project using create-react-app
	At a convenient location on your computer, create a folder named React and move into that folder.
	Then type the following at the prompt to create a new React application named confusion:

	create-react-app confusion

This should create a new folder named confusion within your React folder and create the React application in that folder.
Move to the confusion folder and type the following at the prompt:
	yarn start

This will compile the project and then open a tab in your default browser at the address http://<Your Computer's Name>:3000.
You can initialize your project to be a Git repository by typing the following commands at the prompt:

git init
git add .
git commit -m "Initial Setup"

Thereafter you can set up an online Git repository and synchronize your project to the online repository. Make sure that the online Git repository is a private repository.

>>Conclusions
In this exercise you installed the create-react-app CLI tool and created a basic React project and served up the compiled project to your browser.

yarn create react-app my-app 






Thanks - what ended up working (using Yarn) is upgrading CRA with: yarn global upgrade create-react-app - then doing yarn create react-app my-app




######Exercise (Instructions): Configuring your React Application


Objectives and Outcomes
In this exercise we will set up our project to use Reactstrap (a package supporting easy to use React based Bootstrap 4 components). We will then introduce our first reactstrap component into our application. At the end of this exercise you will be able to:

##Configure your React project to use reactstrap.

>>Start using reactstrap components in your application.

Configure your React Project to use Reactstrap

>>To configure your project to use reactstrap, type the following at the prompt to install reactstrap, and Bootstrap 4:

	yarn add bootstrap@4.0.0
	yarn add reactstrap@5.0.0
	yarn add react-popper@0.9.2
Note: You can also install the same using npm using the "npm install <package> --save" option if you are using npm instead of yarn.

>>Configure to use Bootstrap 4
	Next, open index.js file in the src folder and add the following line into the imports:
	
	. . .
	import 'bootstrap/dist/css/bootstrap.min.css';
	. . .

>>Adding a Navigation Bar:
	Open App.js in the src folder and update it as follows:

	. . .

import { Navbar, NavbarBrand } from 'reactstrap';

class App extends Component {
  render() {
    return (
      <div className="App">
        <Navbar dark color="primary">
          <div className="container">
            <NavbarBrand href="/">Ristorante Con Fusion</NavbarBrand>
          </div>
        </Navbar>
      </div>
    );
  }
}

. . .





>>Exercise (Instructions): Header and Footer

Objectives and Outcomes
In this exercise you will add in a header and a footer to our React application using two React components. This will illustrate the use of multiple components put together form the application's view. You will also add in the Font Awesome icons and Bootstrap-social for use within your application. At the end of this exercise you will be able to:

Use multiple components and their views to put together the view of the application.
Make use of Font Awesome icons and Bootstrap-social within your React application
Using Font Awesome Icons and Bootstrap-Social
First use yarn or npm to fetch Font Awesome and Bootstrap-social to the project by typing the following at the prompt:

	yarn add font-awesome@4.7.0
	yarn add bootstrap-social@5.1.1

Then, open index.js file and update it as follows to enable your application to use Font Awesome and Bootstrap Social:


	import 'font-awesome/css/font-awesome.css';
	import 'bootstrap-social/bootstrap-social.css';

Adding a Header and a Footer
Create a new file named HeaderComponent.js and add the following to it:

import React, { Component } from 'react';
import { Navbar, NavbarBrand, Jumbotron } from 'reactstrap';

class Header extends Component {
  render() {
    return(
    <React.Fragment>
      <Navbar dark>
        <div className="container">
            <NavbarBrand href="/">Ristorante Con Fusion</NavbarBrand>
        </div>
      </Navbar>
      <Jumbotron>
           <div className="container">
               <div className="row row-header">
                   <div className="col-12 col-sm-6">
                       <h1>Ristorante con Fusion</h1>
                       <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>
                   </div>
               </div>
           </div>
       </Jumbotron>
    </React.Fragment>
    );
  }
}

export default Header;

Then, add another file named FooterComponent.js and add the following to it:

import React from 'react';

function Footer(props) {
    return(
    <div className="footer">
        <div className="container">
            <div className="row justify-content-center">             
                <div className="col-4 offset-1 col-sm-2">
                    <h5>Links</h5>
                    <ul className="list-unstyled">
                        <li><a href="#">Home</a></li>
                        <li><a href="#">About</a></li>
                        <li><a href="#">Menu</a></li>
                        <li><a href="contactus.html">Contact</a></li>
                    </ul>
                </div>
                <div className="col-7 col-sm-5">
                    <h5>Our Address</h5>
                    <address>
		              121, Clear Water Bay Road<br />
		              Clear Water Bay, Kowloon<br />
		              HONG KONG<br />
		              <i className="fa fa-phone fa-lg"></i>: +852 1234 5678<br />
		              <i className="fa fa-fax fa-lg"></i>: +852 8765 4321<br />
		              <i className="fa fa-envelope fa-lg"></i>: <a href="mailto:confusion@food.net">
                         confusion@food.net</a>
                    </address>
                </div>
                <div className="col-12 col-sm-4 align-self-center">
                    <div className="text-center">
                        <a className="btn btn-social-icon btn-google" href="http://google.com/+"><i className="fa fa-google-plus"></i></a>
                        <a className="btn btn-social-icon btn-facebook" href="http://www.facebook.com/profile.php?id="><i className="fa fa-facebook"></i></a>
                        <a className="btn btn-social-icon btn-linkedin" href="http://www.linkedin.com/in/"><i className="fa fa-linkedin"></i></a>
                        <a className="btn btn-social-icon btn-twitter" href="http://twitter.com/"><i className="fa fa-twitter"></i></a>
                        <a className="btn btn-social-icon btn-google" href="http://youtube.com/"><i className="fa fa-youtube"></i></a>
                        <a className="btn btn-social-icon" href="mailto:"><i className="fa fa-envelope-o"></i></a>
                    </div>
                </div>
            </div>
            <div className="row justify-content-center">             
                <div className="col-auto">
                    <p>Â© Copyright 2018 Ristorante Con Fusion</p>
                </div>
            </div>
        </div>
    </div>
    )
}

export default Footer;

Integrating Header and Footer into the React Application
Now we open MainComponent.js and update it to integrate the header and footer into our application:


import Header from './HeaderComponent';
import Footer from './FooterComponent';

. . .

        <Header />
        <Menu dishes={this.state.dishes} onClick={(dishId) => this.onDishSelect(dishId)} />
        <DishDetail dish={this.state.dishes.filter((dish) => dish.id === this.state.selectedDish)[0]} />
        <Footer />\




>>Exercise (Instructions): React Router

>>Objectives and Outcomes

In this exercise we learn to use the React Router to configure and set up navigation among various pages in a React application. At the end of this exercise you will be able to:

Install and configure your application to use React Router
Configure the routes for React router to enable you to navigate to various pages within your React application
Installing and Configuring React Router
First install React Router into your project by typing the following at the prompt:

	yarn add react-router-dom@4.2.2

>>Then, open App.js and update it as follows:

		. . .

import { BrowserRouter } from 'react-router-dom';

. . .

    <BrowserRouter>
      <div className="App">
        <Main />
      </div>
    </BrowserRouter>
    
. . .


>>Add a Home Component

Create a new file named HomeComponent.js in the
 components folder and add the following to it:

	import React from 'react';

	function Home(props) {
    		return(
      		<div className="container">
        		<h4>Home</h4>
     		 </div>
    		);
	}

export default Home;  

>>Configuring the Router

Open MainComponent.js file and update it as follows:\

. . .

import Home from './HomeComponent';

. . .

import { Switch, Route, Redirect } from 'react-router-dom';

. . .

  render() {


    const HomePage = () => {
      return(
          <Home 
          />
      );
    }

. . .

          <Switch>
              <Route path='/home' component={HomePage} />
              <Route exact path='/menu' component={() => <Menu dishes={this.state.dishes} />} />
              <Redirect to="/home" />
          </Switch>

. . .

>>Open HeaderComponent.js and update its contents with the following:

import { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron } from 'reactstrap';
import { NavLink } from 'react-router-dom';

class Header extends Component {
    constructor(props) {
        super(props);
    
        this.toggleNav = this.toggleNav.bind(this);
        this.state = {
          isNavOpen: false
        };
      }

      toggleNav() {
        this.setState({
          isNavOpen: !this.state.isNavOpen
        });
      }

    render() {
        return(
            <div>
                <Navbar dark expand="md">
                    <div className="container">
                        <NavbarToggler onClick={this.toggleNav} />
                        <NavbarBrand className="mr-auto" href="/"><img src='assets/images/logo.png' height="30" width="41" alt='Ristorante Con Fusion' /></NavbarBrand>
                        <Collapse isOpen={this.state.isNavOpen} navbar>
                             <Nav navbar>
                            <NavItem>
                                <NavLink className="nav-link"  to='/home'><span className="fa fa-home fa-lg"></span> Home</NavLink>
                            </NavItem>
                            <NavItem>
                                <NavLink className="nav-link" to='/aboutus'><span className="fa fa-info fa-lg"></span> About Us</NavLink>
                            </NavItem>
                            <NavItem>
                                <NavLink className="nav-link"  to='/menu'><span className="fa fa-list fa-lg"></span> Menu</NavLink>
                            </NavItem>
                            <NavItem>
                                <NavLink className="nav-link" to='/contactus'><span className="fa fa-address-card fa-lg"></span> Contact Us</NavLink>
                            </NavItem>
                            </Nav>
                        </Collapse>
                    </div>
                </Navbar>
                <Jumbotron>
                    <div className="container">
                        <div className="row row-header">
                            <div className="col-12 col-sm-6">
                                <h1>Ristorante con Fusion</h1>
                                <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>
   </div>
                        </div>
                    </div>
                </Jumbotron>
            </div>
        );
    }
}


>>Then, open FooterComponent.js and update it as follows:

. . .

import { Link } from 'react-router-dom';

. . .

                        <li><Link to='/home'>Home</Link></li>
                        <li><Link to='/aboutus'>About Us</Link></li>
                        <li><Link to='/menu'>Menu</Link></li>
                        <li><Link to='/contactus'>Contact Us</Link></li>
                        
. . .


>>Open MenuComponent.js and remove the onClick() from the Card in the RenderMenuItem() function.
>>Save all the changes and do a Git commit with the message "React Router".


Conclusions
In this exercise you learn about installing, configuring and using the React Router for navigation within your React app.



>>Exercise (Instructions): Introduction to Redux

Objectives and Outcomes
In this exercise you will learn to use Redux. You will install and configure Redux and use it within your React application. At the end of this exercise you will be able to:

Install and configure Redux within your application
Configure your React application to make use of Redux

>>Installing and Configuring Redux
As a first step you will install Redux and React-Redux into your application as follows:

	yarn add redux@3.7.2
	yarn add react-redux@5.0.7

>>Next, create a folder named redux in the src folder and then add a file named reducer.js with the code below:

import { DISHES } from '../shared/dishes';
import { COMMENTS } from '../shared/comments';
import { PROMOTIONS } from '../shared/promotions';
import { LEADERS } from '../shared/leaders';

export const initialState = {
    dishes: DISHES,
    comments: COMMENTS,
    promotions: PROMOTIONS,
    leaders: LEADERS
};

export const Reducer = (state = initialState, action) => {
    return state;
};

Then, add a file named configureStore.js in the redux folder and add the following code to it:

import {createStore} from 'redux';
import { Reducer, initialState } from './reducer'

export const ConfigureStore = () => {
    const store = createStore(
        Reducer, // reducer
        initialState, // our initialState
    );

    return store;
}

Next, open App.js and update it as follows:

. . .


import { Provider } from 'react-redux';
import { ConfigureStore } from './redux/configureStore';

const store = ConfigureStore();


. . .

      <Provider store={store}>
        <BrowserRouter>
          <div className="App">
            <Main />
          </div>
        </BrowserRouter>
      </Provider>

. . .

Finally, update MainComponent.js to connect it to Redux store and use it:


. . .

import { Switch, Route, Redirect, withRouter } from 'react-router-dom'
import { connect } from 'react-redux';


const mapStateToProps = state => {
  return {
    dishes: state.dishes,
    comments: state.comments,
    promotions: state.promotions,
    leaders: state.leaders
  }
}

. . .

    const HomePage = () => {
      return(
          <Home 
              dish={this.props.dishes.filter((dish) => dish.featured)[0]}
              promotion={this.props.promotions.filter((promo) => promo.featured)[0]}
              leader={this.props.leaders.filter((leader) => leader.featured)[0]}
          />
      );
    }

    const DishWithId = ({match}) => {
      return(
          <DishDetail dish={this.props.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]} 
            comments={this.props.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))} />
      );
    };

    return (
      <div>
        <Header />
        <div>
          <Switch>
              <Route path='/home' component={HomePage} />
              <Route exact path='/aboutus' component={() => <About leaders={this.props.leaders} />} />} />
              <Route exact path='/menu' component={() => <Menu dishes={this.props.dishes} />} />
              <Route path='/menu/:dishId' component={DishWithId} />
              <Route exact path='/contactus' component={Contact} />} />
              <Redirect to="/home" />
          </Switch>
        </div>
        <Footer />
      </div>
    );
  }
}

export default withRouter(connect(mapStateToProps)(Main));

Save all the changes and do a Git commit with the message "Intro. to Redux".
Conclusions
In this exercise you learnt to install and configure Redux and use it in your React application.
